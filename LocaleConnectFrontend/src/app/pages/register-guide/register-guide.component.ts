import { Component } from '@angular/core';
import {
  AbstractControl,
  FormBuilder,
  FormControl,
  FormGroup,
  ValidationErrors,
  ValidatorFn,
  Validators
} from "@angular/forms";
import {MatDialog} from "@angular/material/dialog";
import {LoginComponent} from "../login/login.component";
import {AuthService} from "../../service/auth.service";
import {User} from "../../model/user";
import {Guide} from "../../model/guide";

@Component({
  selector: 'app-register-guide',
  templateUrl: './register-guide.component.html',
  styleUrls: ['./register-guide.component.scss']
})
export class RegisterGuideComponent {
  registerForm: FormGroup;
  languagesList: string[] = [ 'Afrikaans', 'Albanian', 'Amharic', 'Arabic', 'Armenian', 'Azerbaijani', 'Basque', 'Belarusian', 'Bengali', 'Bosnian', 'Bulgarian',
    'Catalan', 'Cebuano', 'Chichewa', 'Chinese (Simplified)', 'Chinese (Traditional)', 'Corsican', 'Croatian', 'Czech', 'Danish', 'Dutch',
    'English', 'Esperanto', 'Estonian', 'Filipino', 'Finnish', 'French', 'Frisian', 'Galician', 'Georgian', 'German', 'Greek', 'Gujarati',
    'Haitian Creole', 'Hausa', 'Hawaiian', 'Hebrew', 'Hindi', 'Hmong', 'Hungarian', 'Icelandic', 'Igbo', 'Indonesian', 'Irish', 'Italian',
    'Japanese', 'Javanese', 'Kannada', 'Kazakh', 'Khmer', 'Korean', 'Kurdish (Kurmanji)', 'Kyrgyz', 'Lao', 'Latin', 'Latvian', 'Lithuanian',
    'Luxembourgish', 'Macedonian', 'Malagasy', 'Malay', 'Malayalam', 'Maltese', 'Maori', 'Marathi', 'Mongolian', 'Myanmar (Burmese)',
    'Nepali', 'Norwegian', 'Pashto', 'Persian', 'Polish', 'Portuguese', 'Punjabi', 'Romanian', 'Russian', 'Samoan', 'Scots Gaelic',
    'Serbian', 'Sesotho', 'Shona', 'Sindhi', 'Sinhala', 'Slovak', 'Slovenian', 'Somali', 'Spanish', 'Sundanese', 'Swahili', 'Swedish',
    'Tajik', 'Tamil', 'Telugu', 'Thai', 'Turkish', 'Ukrainian', 'Urdu', 'Uzbek', 'Vietnamese', 'Welsh', 'Xhosa', 'Yiddish', 'Yoruba', 'Zulu','Other'];
  constructor(private fb: FormBuilder, private authService: AuthService, public dialog: MatDialog) {
    this.registerForm = this.fb.group({
      firstname: ['', Validators.required],
      lastname: ['', Validators.required],
      username: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      dateOfBirth: ['', [Validators.required, this.adultValidator]],
      languages: ['', [Validators.required, this.minLanguagesValidator(2)]],
      termsAccepted: [false, Validators.requiredTrue]
    });
  }

  onSubmit(): void {

    if (this.registerForm.valid) {
      const formValue = this.registerForm.value;
      const newUser: Guide = {
        id: 0, // Generated by the backend
        firstName: formValue.firstname,
        lastName: formValue.lastname,
        userName: formValue.username,
        email: formValue.email,
        dateOfBirth:formValue.dateOfBirth,
        bio: '',
        password: formValue.password,
        visitedCountries: [],
        languages:formValue.languages,
        followingIds: [],
        followerIds: [],
        rating:0,
        city:''
      };
      this.authService.registerGuide(this.registerForm.value).subscribe(
        {
          next: (user) => {
            user = newUser;
            return user;
          },
          error: (errorMessage) => {
            console.error("Registration error", errorMessage);
            this.handleError(errorMessage);
          }
        }
      );

    }
  }
  switchToLogin(): void {
    this.dialog.closeAll();
    this.dialog.open(LoginComponent, {
      width: '400px',
      maxHeight:'600px'
    });
  }
  private handleError(errorMessage: string) {
    if (errorMessage.includes('username is already taken')) {
      this.registerForm.controls['username'].setErrors({userExists: true});
    }
    if (errorMessage.includes('email is already in use')) {
      this.registerForm.controls['email'].setErrors({emailExists: true});
    }
  }

  // Custom validator to check if the user is at least 18 years old
  private adultValidator(control: FormControl): ValidationErrors | null {
    if (control.value) {
      const birthDate = new Date(control.value);
      const adultAge = 18;
      const currentDate = new Date();
      const eligibleDate = new Date(currentDate.getFullYear() - adultAge, currentDate.getMonth(), currentDate.getDate());

      if (birthDate > eligibleDate) {
        return { 'tooYoung': true };
      }
    }
    return null;
  }
//custom validator to check if the user speaks more than one language
  private minLanguagesValidator(min = 2): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      const selected = control.value;
      return selected?.length >= min ? null : { 'minLanguages': { value: control.value } };
    };


  }
}


