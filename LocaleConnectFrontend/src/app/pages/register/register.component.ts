import {Component} from '@angular/core';
import {LoginComponent} from "../login/login.component";
import {MatDialog} from "@angular/material/dialog";
import {FormBuilder, FormGroup, Validators} from "@angular/forms";
import {RegisterGuideComponent} from "../register-guide/register-guide.component";
import {AuthService} from "../../api/auth.service";
import {User} from "../../model/user";

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent {
  registerForm: FormGroup;

  constructor(private fb: FormBuilder, private authService: AuthService, public dialog: MatDialog) {
    this.registerForm = this.fb.group({
      firstname: ['', Validators.required],
      lastname: ['', Validators.required],
      username: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
  }

  onSubmit(): void {
    if (this.registerForm.valid) {
      const formValue = this.registerForm.value;
      const newUser: User = {
        id: 0, // Generated by the backend
        firstName: formValue.firstname,
        lastName: formValue.lastname,
        userName: formValue.username,
        email: formValue.email,
        dateOfBirth: new Date(),
        bio: '',
        password: formValue.password,
        visitedCountries: [],
        registeredAsLocalGuide: false,
        languages: [],
        followingIds: [],
        followerIds: []
      };

      this.authService.registerTraveler(newUser).subscribe({
        next: (user) => {
          user = newUser;
          return user;
        },
        error: (errorMessage) => {
          console.error("Registration error", errorMessage);
          this.handleError(errorMessage);
        }
      });
    }
  }


  switchToLogin(): void {
    this.dialog.closeAll();
    this.dialog.open(LoginComponent, {
      width: '400px'
    });
  }

  openGuideDialog(): void {
    this.dialog.open(RegisterGuideComponent, {
      width: '400px'
    });
  }

  private handleError(errorMessage: string) {
    if (errorMessage.includes('username is already taken')) {
      this.registerForm.controls['username'].setErrors({userExists: true});
    }
    if (errorMessage.includes('email is already in use')) {
      this.registerForm.controls['email'].setErrors({emailExists: true});
    }
  }
}
